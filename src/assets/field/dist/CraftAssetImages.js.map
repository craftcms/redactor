{"version":3,"file":"CraftAssetImages.js","mappings":"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","sources":["webpack:///./js/CraftAssetImages.js"],"sourcesContent":["var plugin = $.extend({}, Craft.Redactor.PluginBase, {\n  title: 'image',\n  apiTarget: 'plugin.craftAssetImages.showModal',\n  icon: '<i class=\"re-icon-image\"></i>',\n  transforms: [],\n  volumes: null,\n  allowAllUploaders: false,\n  defaultTransform: '',\n  modalState: {\n    selectedTransform: null,\n  },\n\n  showModal: function () {\n    this.saveSelection(this.app);\n\n    if (typeof this.assetSelectionModal === 'undefined') {\n      const criteria = {\n        siteId: this.elementSiteId,\n        kind: 'image',\n      };\n\n      if (this.allowAllUploaders) {\n        criteria.uploaderId = null;\n      }\n\n      this.assetSelectionModal = Craft.createElementSelectorModal(\n        'craft\\\\elements\\\\Asset',\n        {\n          storageKey: 'RedactorInput.ChooseImage',\n          multiSelect: true,\n          sources: this.volumes,\n          criteria: criteria,\n          onSelect: function (assets, transform) {\n            if (assets.length) {\n              this.restoreSelection(this.app);\n\n              const data = {};\n              const isMulti = assets.length > 1;\n\n              const processAssetUrls = function (assets, callback) {\n                const asset = assets.pop();\n                const isTransform = this._isTransformUrl(asset.url);\n\n                // If transform was selected or we don't have a default, no _real_ processing.\n                if (isTransform || this.defaultTransform.length == 0) {\n                  data['asset' + asset.id] = {\n                    url: this._buildAssetUrl(\n                      asset.id,\n                      asset.url,\n                      isTransform ? transform : this.defaultTransform\n                    ),\n                    id: asset.id,\n                  };\n\n                  if (assets.length) {\n                    processAssetUrls(assets, callback);\n                  } else {\n                    callback();\n                  }\n                  // Otherwise, get the transform url for the default transform.\n                } else {\n                  let url = this._getTransformUrl(\n                    asset.id,\n                    this.defaultTransform,\n                    function (url) {\n                      data['asset' + asset.id] = {\n                        url: this._buildAssetUrl(\n                          asset.id,\n                          url,\n                          this.defaultTransform\n                        ),\n                        id: asset.id,\n                      };\n\n                      if (assets.length) {\n                        processAssetUrls(assets, callback);\n                      } else {\n                        callback();\n                      }\n                    }.bind(this)\n                  );\n                }\n              }.bind(this);\n\n              processAssetUrls(\n                assets,\n                function () {\n                  this.app.api('module.image.insert', data);\n\n                  // If single asset selected, show the image modal.\n                  if (!isMulti) {\n                    this.modalState.selectedTransform = this.defaultTransform;\n                    this.app.api('module.image.open');\n                  }\n                }.bind(this)\n              );\n            }\n          }.bind(this),\n          transforms: this.transforms,\n          closeOtherModals: false,\n        }\n      );\n    } else {\n      this.assetSelectionModal.show();\n    }\n  },\n\n  setTransforms: function (transforms) {\n    this.transforms = transforms;\n  },\n\n  setDefaultTransform: function (transform) {\n    this.defaultTransform = transform;\n  },\n\n  setVolumes: function (volumes) {\n    this.volumes = volumes;\n  },\n\n  _buildAssetUrl: (assetId, assetUrl, transform) =>\n    assetUrl +\n    '#asset:' +\n    assetId +\n    ':' +\n    (transform ? 'transform:' + transform : 'url'),\n\n  _removeTransformFromUrl: (url) =>\n    url.replace(/(^|\\/)(_[^\\/]+\\/)([^\\/]+)$/, '$1$3'),\n\n  _isTransformUrl: (url) => /(^|\\/)_[^\\/]+\\/[^\\/]+$/.test(url),\n\n  _getTransformUrl: function (assetId, handle, callback) {\n    var data = {\n      assetId: assetId,\n      handle: handle,\n    };\n\n    Craft.postActionRequest(\n      'assets/generate-transform',\n      data,\n      function (response, textStatus) {\n        if (textStatus === 'success') {\n          if (response.url) {\n            callback(response.url);\n          } else {\n            alert('There was an error generating the transform URL.');\n          }\n        }\n      }\n    );\n  },\n\n  _getAssetUrlComponents: (url) => {\n    const matches = url.match(\n      /(.*)#asset:(\\d+):(url|transform):?([a-zA-Z][a-zA-Z0-9_]*)?/\n    );\n    return matches\n      ? {\n          url: matches[1],\n          assetId: matches[2],\n          transform: matches[3] !== 'url' ? matches[4] : null,\n        }\n      : null;\n  },\n\n  onmodal: {\n    imageedit: {\n      open: function (modal, form) {\n        this.registerCmdS(\n          () => {\n            // Seems to be the simplest way.\n            const imageModule = this.app.module.image;\n            const modalModule = this.app.module.modal;\n            imageModule._save(modalModule.$modal, modalModule.$modalForm);\n          },\n          () => {\n            this.app.api('module.modal.close');\n          }\n        );\n\n        const parts = this._getAssetUrlComponents(\n          this.app.module.image.$image.$element.nodes[0].src\n        );\n\n        if (!parts) {\n          return;\n        }\n\n        let {transform} = parts;\n\n        if (!transform || !transform.length) {\n          transform = this.defaultTransform;\n        } else {\n          this.modalState.selectedTransform = transform;\n        }\n\n        const options = [{handle: '', name: 'No transform'}].concat(\n          this.transforms\n        );\n\n        const $select = $('<select id=\"modal-image-transform\"></select>').on(\n          'change',\n          function (ev) {\n            this.modalState.selectedTransform = $(ev.currentTarget).val();\n          }.bind(this)\n        );\n\n        for (optionIndex in options) {\n          let option = options[optionIndex];\n          let selected = transform && option.handle == transform;\n          $select.append(\n            '<option value=\"' +\n              option.handle +\n              '\"' +\n              (selected ? ' selected=\"selected\"' : '') +\n              '>' +\n              option.name +\n              '</option>'\n          );\n        }\n\n        const $formItem = $(\n          '<div class=\"form-item form-item-transform\"><label for=\"modal-image-transform\">Transform</label></div>'\n        ).append($select);\n\n        $(form.nodes[0]).append($formItem);\n      },\n\n      close: function () {\n        Garnish.shortcutManager.removeLayer();\n      },\n    },\n  },\n\n  onimage: {\n    changed: function (image) {\n      const $image = $(image.$element.nodes[0]);\n      const parts = this._getAssetUrlComponents($image.attr('src'));\n      const newTransform = this.modalState.selectedTransform;\n\n      if (!parts) {\n        return;\n      }\n\n      const {transform, assetId, url} = parts;\n\n      if (transform == newTransform) {\n        return;\n      }\n\n      $image.fadeTo(100, 0.2);\n\n      if (newTransform.length) {\n        this._getTransformUrl(\n          assetId,\n          newTransform,\n          function (url) {\n            $image.prop('src', this._buildAssetUrl(assetId, url, newTransform));\n            $image.stop().fadeTo(0, 1);\n          }.bind(this)\n        );\n      } else {\n        const pattern = new RegExp('(.*)(_' + transform + '.*/)(.*)');\n        $image.prop(\n          'src',\n          this._buildAssetUrl(\n            assetId,\n            this._removeTransformFromUrl(url),\n            newTransform\n          )\n        );\n        $image.stop().fadeTo(0, 1);\n      }\n    },\n  },\n});\n\n(function ($R) {\n  $R.add('plugin', 'craftAssetImages', plugin);\n})(Redactor);\n"],"names":["plugin","$","extend","Craft","Redactor","PluginBase","title","apiTarget","icon","transforms","volumes","allowAllUploaders","defaultTransform","modalState","selectedTransform","showModal","this","saveSelection","app","assetSelectionModal","criteria","siteId","elementSiteId","kind","uploaderId","createElementSelectorModal","storageKey","multiSelect","sources","onSelect","assets","transform","length","restoreSelection","data","isMulti","processAssetUrls","callback","asset","pop","isTransform","_isTransformUrl","url","id","_buildAssetUrl","_getTransformUrl","bind","api","closeOtherModals","show","setTransforms","setDefaultTransform","setVolumes","assetId","assetUrl","_removeTransformFromUrl","replace","test","handle","postActionRequest","response","textStatus","alert","_getAssetUrlComponents","matches","match","onmodal","imageedit","open","modal","form","registerCmdS","imageModule","module","image","modalModule","_save","$modal","$modalForm","parts","$image","$element","nodes","src","options","name","concat","$select","on","ev","currentTarget","val","optionIndex","option","selected","append","$formItem","close","Garnish","shortcutManager","removeLayer","onimage","changed","attr","newTransform","fadeTo","prop","stop","RegExp","add"],"sourceRoot":""}