{"version":3,"sources":["RedactorInput.js"],"names":["$","Craft","RedactorInput","Garnish","Base","extend","id","linkOptions","volumes","elementSiteId","redactorConfig","$textarea","redactor","linkOptionModals","init","settings","this","transforms","lang","redactorLang","direction","orientation","imageUpload","fileUpload","dragImageUpload","dragFileUpload","toolbarFixedTopOffset","plugins","buttons","index","inArray","splice","unshift","lowestListButtonIndex","oldListButtons","i","length","callbacks","handleRedactorInit","initRedactor","livePreview","on","proxy","core","destroy","mergeCallbacks","callback1","callback2","apply","arguments","currentInstance","onInitRedactor","$box","addClass","opts","toolbar","customizeToolbar","leaveFullscreetOnSaveShortcut","editor","toolbarFixed","scrollPageOnReady","$doc","ready","trigger","$imageBtn","replaceRedactorButton","get","$fileBtn","button","addCallback","remove","$linkBtn","dropdownOptions","title","optionTitle","func","link","observe","element","in","out","unlink","attr","class","aria-disabled","addDropdown","onImageButtonClick","selection","save","assetSelectionModal","createElementSelectorModal","storageKey","multiSelect","sources","criteria","siteId","kind","onSelect","assets","transform","restore","asset","url","insert","node","code","sync","images","closeOtherModals","show","onFileButtonClick","assetLinkSelectionModal","text","label","onLinkOptionClick","key","elementType","elements","refHandle","onEditorFocus","box","onEditorBlur","removeClass","fullscreen","disable","cp","isOpen","$placeholder","addAfter","$btn","build","icon","parent","after","append","jQuery"],"mappings":"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","file":"RedactorInput.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Redactor input class\n     */\n    Craft.RedactorInput = Garnish.Base.extend(\n        {\n            id: null,\n            linkOptions: null,\n            volumes: null,\n            elementSiteId: null,\n            redactorConfig: null,\n\n            $textarea: null,\n            redactor: null,\n            linkOptionModals: null,\n\n            init: function(settings) {\n                this.id = settings.id;\n                this.linkOptions = settings.linkOptions;\n                this.volumes = settings.volumes;\n                this.transforms = settings.transforms;\n                this.elementSiteId = settings.elementSiteId;\n                this.redactorConfig = settings.redactorConfig;\n\n                this.linkOptionModals = [];\n\n                if (!this.redactorConfig.lang) {\n                    this.redactorConfig.lang = settings.redactorLang;\n                }\n\n                if (!this.redactorConfig.direction) {\n                    this.redactorConfig.direction = (settings.direction || Craft.orientation);\n                }\n\n                this.redactorConfig.imageUpload = true;\n                this.redactorConfig.fileUpload = true;\n                this.redactorConfig.dragImageUpload = false;\n                this.redactorConfig.dragFileUpload = false;\n                this.redactorConfig.toolbarFixedTopOffset = 72;\n\n                // Prevent a JS error when calling core.destroy() when opts.plugins == false\n                if (typeof this.redactorConfig.plugins !== typeof []) {\n                    this.redactorConfig.plugins = [];\n                }\n\n                // Redactor I config setting normalization\n                if (this.redactorConfig.buttons) {\n                    var index;\n\n                    // buttons.html => plugins.source\n                    if ((index = $.inArray('html', this.redactorConfig.buttons)) !== -1) {\n                        this.redactorConfig.buttons.splice(index, 1);\n                        this.redactorConfig.plugins.unshift('source');\n                    }\n\n                    // buttons.formatting => buttons.format\n                    if ((index = $.inArray('formatting', this.redactorConfig.buttons)) !== -1) {\n                        this.redactorConfig.buttons.splice(index, 1, 'format');\n                    }\n\n                    // buttons.unorderedlist/orderedlist/undent/indent => buttons.lists\n                    var oldListButtons = ['unorderedlist', 'orderedlist', 'undent', 'indent'],\n                        lowestListButtonIndex;\n\n                    for (var i = 0; i < oldListButtons.length; i++) {\n                        if ((index = $.inArray(oldListButtons[i], this.redactorConfig.buttons)) !== -1) {\n                            this.redactorConfig.buttons.splice(index, 1);\n\n                            if (typeof lowestListButtonIndex === 'undefined' || index < lowestListButtonIndex) {\n                                lowestListButtonIndex = index;\n                            }\n                        }\n                    }\n\n                    if (typeof lowestListButtonIndex !== 'undefined') {\n                        this.redactorConfig.buttons.splice(lowestListButtonIndex, 0, 'lists');\n                    }\n                }\n\n                this.redactorConfig.callbacks = {\n                    init: Craft.RedactorInput.handleRedactorInit\n                };\n\n                // Initialize Redactor\n                this.$textarea = $('#' + this.id);\n\n                this.initRedactor();\n\n                if (typeof Craft.livePreview !== 'undefined') {\n                    // There's a UI glitch if Redactor is in Code view when Live Preview is shown/hidden\n                    Craft.livePreview.on('beforeEnter beforeExit', $.proxy(function() {\n                        this.redactor.core.destroy();\n                    }, this));\n\n                    Craft.livePreview.on('enter slideOut', $.proxy(function() {\n                        this.initRedactor();\n                    }, this));\n                }\n            },\n\n            mergeCallbacks: function(callback1, callback2) {\n                return function() {\n                    callback1.apply(this, arguments);\n                    callback2.apply(this, arguments);\n                };\n            },\n\n            initRedactor: function() {\n                Craft.RedactorInput.currentInstance = this;\n                this.$textarea.redactor(this.redactorConfig);\n                delete Craft.RedactorInput.currentInstance;\n            },\n\n            onInitRedactor: function(redactor) {\n                this.redactor = redactor;\n\n                // Add the .focusable-input class for Craft.CP\n                this.redactor.$box.addClass('focusable-input');\n\n                // Only customize the toolbar if there is one,\n                // otherwise we get a JS error due to redactor.$toolbar being undefined\n                if (this.redactor.opts.toolbar) {\n                    this.customizeToolbar();\n                }\n\n                this.leaveFullscreetOnSaveShortcut();\n\n                this.redactor.core.editor()\n                    .on('focus', $.proxy(this, 'onEditorFocus'))\n                    .on('blur', $.proxy(this, 'onEditorBlur'));\n\n                if (this.redactor.opts.toolbarFixed && !Craft.RedactorInput.scrollPageOnReady) {\n                    Garnish.$doc.ready(function() {\n                        Garnish.$doc.trigger('scroll');\n                    });\n\n                    Craft.RedactorInput.scrollPageOnReady = true;\n                }\n            },\n\n            customizeToolbar: function() {\n                // Override the Image and File buttons?\n                if (this.volumes.length) {\n                    var $imageBtn = this.replaceRedactorButton('image', this.redactor.lang.get('image')),\n                        $fileBtn = this.replaceRedactorButton('file', this.redactor.lang.get('file'));\n\n                    if ($imageBtn) {\n                        this.redactor.button.addCallback($imageBtn, $.proxy(this, 'onImageButtonClick'));\n                    }\n\n                    if ($fileBtn) {\n                        this.redactor.button.addCallback($fileBtn, $.proxy(this, 'onFileButtonClick'));\n                    }\n                }\n                else {\n                    // Image and File buttons aren't supported\n                    this.redactor.button.remove('image');\n                    this.redactor.button.remove('file');\n                }\n\n                // Override the Link button?\n                if (this.linkOptions.length) {\n                    var $linkBtn = this.replaceRedactorButton('link', this.redactor.lang.get('link'));\n\n                    if ($linkBtn) {\n                        var dropdownOptions = {};\n\n                        for (var i = 0; i < this.linkOptions.length; i++) {\n                            dropdownOptions['link_option' + i] = {\n                                title: this.linkOptions[i].optionTitle,\n                                func: $.proxy(this, 'onLinkOptionClick', i)\n                            };\n                        }\n\n                        // Add the default Link options\n                        $.extend(dropdownOptions, {\n                            link: {\n                                title: this.redactor.lang.get('link-insert'),\n                                func: 'link.show',\n                                observe: {\n                                    element: 'a',\n                                    in: {\n                                        title: this.redactor.lang.get('link-edit')\n                                    },\n                                    out: {\n                                        title: this.redactor.lang.get('link-insert')\n                                    }\n                                }\n                            },\n                            unlink: {\n                                title: this.redactor.lang.get('unlink'),\n                                func: 'link.unlink',\n                                observe: {\n                                    element: 'a',\n                                    out: {\n                                        attr: {\n                                            'class': 'redactor-dropdown-link-inactive',\n                                            'aria-disabled': true\n                                        }\n                                    }\n                                }\n                            }\n                        });\n\n                        this.redactor.button.addDropdown($linkBtn, dropdownOptions);\n                    }\n                }\n            },\n\n            onImageButtonClick: function() {\n                this.redactor.selection.save();\n\n                if (typeof this.assetSelectionModal === 'undefined') {\n                    this.assetSelectionModal = Craft.createElementSelectorModal('craft\\\\elements\\\\Asset', {\n                        storageKey: 'RedactorInput.ChooseImage',\n                        multiSelect: true,\n                        sources: this.volumes,\n                        criteria: {siteId: this.elementSiteId, kind: 'image'},\n                        onSelect: $.proxy(function(assets, transform) {\n                            if (assets.length) {\n                                this.redactor.selection.restore();\n                                for (var i = 0; i < assets.length; i++) {\n                                    var asset = assets[i],\n                                        url = asset.url + '#asset:' + asset.id;\n\n                                    if (transform) {\n                                        url += ':transform:' + transform;\n                                    }\n\n                                    this.redactor.insert.node($('<figure><img src=\"' + url + '\" /></figure>')[0]);\n                                    this.redactor.code.sync();\n                                }\n                                this.redactor.observe.images();\n                            }\n                        }, this),\n                        closeOtherModals: false,\n                        transforms: this.transforms\n                    });\n                }\n                else {\n                    this.assetSelectionModal.show();\n                }\n            },\n\n            onFileButtonClick: function() {\n                this.redactor.selection.save();\n\n                if (typeof this.assetLinkSelectionModal === 'undefined') {\n                    this.assetLinkSelectionModal = Craft.createElementSelectorModal('craft\\\\elements\\\\Asset', {\n                        storageKey: 'RedactorInput.LinkToAsset',\n                        sources: this.volumes,\n                        criteria: {siteId: this.elementSiteId},\n                        onSelect: $.proxy(function(assets) {\n                            if (assets.length) {\n                                this.redactor.selection.restore();\n                                var asset = assets[0],\n                                    url = asset.url + '#asset:' + asset.id,\n                                    selection = this.redactor.selection.text(),\n                                    title = selection.length > 0 ? selection : asset.label;\n                                this.redactor.insert.node($('<a href=\"' + url + '\">' + title + '</a>')[0]);\n                                this.redactor.code.sync();\n                            }\n                        }, this),\n                        closeOtherModals: false,\n                        transforms: this.transforms\n                    });\n                }\n                else {\n                    this.assetLinkSelectionModal.show();\n                }\n            },\n\n            onLinkOptionClick: function(key) {\n                this.redactor.selection.save();\n\n                if (typeof this.linkOptionModals[key] === 'undefined') {\n                    var settings = this.linkOptions[key];\n\n                    this.linkOptionModals[key] = Craft.createElementSelectorModal(settings.elementType, {\n                        storageKey: (settings.storageKey || 'RedactorInput.LinkTo.' + settings.elementType),\n                        sources: settings.sources,\n                        criteria: $.extend({siteId: this.elementSiteId}, settings.criteria),\n                        onSelect: $.proxy(function(elements) {\n                            if (elements.length) {\n                                this.redactor.selection.restore();\n                                var element = elements[0],\n                                    url = element.url + '#' + settings.refHandle + ':' + element.id,\n                                    selection = this.redactor.selection.text(),\n                                    title = selection.length > 0 ? selection : element.label;\n                                this.redactor.insert.node($('<a href=\"' + url + '\">' + title + '</a>')[0]);\n                                this.redactor.code.sync();\n                            }\n                        }, this),\n                        closeOtherModals: false\n                    });\n                }\n                else {\n                    this.linkOptionModals[key].show();\n                }\n            },\n\n            onEditorFocus: function() {\n                this.redactor.core.box().addClass('focus');\n                this.redactor.core.box().trigger('focus');\n            },\n\n            onEditorBlur: function() {\n                this.redactor.core.box().removeClass('focus');\n                this.redactor.core.box().trigger('blur');\n            },\n\n            leaveFullscreetOnSaveShortcut: function() {\n                if (typeof this.redactor.fullscreen !== 'undefined' && typeof this.redactor.fullscreen.disable === 'function') {\n                    Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                        if (this.redactor.fullscreen.isOpen) {\n                            this.redactor.fullscreen.disable();\n                        }\n                    }, this));\n                }\n            },\n\n            replaceRedactorButton: function(key, title) {\n                // Ignore if the button isn't in use\n                if (!this.redactor.button.get(key).length) {\n                    return;\n                }\n\n                // Create a placeholder button\n                var $placeholder = this.redactor.button.addAfter(key, key+'_placeholder');\n\n                // Remove the original\n                this.redactor.button.remove(key);\n\n                // Add the new one\n                // (Can't just use button.addAfter() here because it doesn't let us specify\n                // full button properties (e.g. icon); just title)\n                var $btn = this.redactor.button.build(key, {\n                    title: title,\n                    icon: true\n                });\n                $placeholder.parent().after($('<li>').append($btn));\n\n                // Remove the placeholder\n                $placeholder.remove();\n\n                return $btn;\n            }\n        },\n        {\n            handleRedactorInit: function() {\n                // `this` is the current Redactor instance.\n                // `Craft.RedactorInput.currentInstance` is the current RedactorInput instance\n                Craft.RedactorInput.currentInstance.onInitRedactor(this);\n            }\n        });\n})(jQuery);\n"]}