{"version":3,"sources":["CraftAssetImages.js"],"names":["plugin","$","extend","Craft","Redactor","PluginBase","title","apiTarget","icon","transforms","volumes","allowAllUploaders","defaultTransform","modalState","selectedTransform","showModal","this","app","selection","isCollapsed","save","selectionMarkers","saveMarkers","assetSelectionModal","criteria","siteId","elementSiteId","kind","uploaderId","createElementSelectorModal","storageKey","multiSelect","sources","onSelect","assets","transform","length","restoreMarkers","restore","data","isMulti","processAssetUrls","callback","asset","pop","isTransform","_isTransformUrl","url","id","_buildAssetUrl","_getTransformUrl","bind","api","closeOtherModals","show","setTransforms","setDefaultTransform","setVolumes","assetId","assetUrl","_removeTransformFromUrl","replace","test","handle","postActionRequest","response","textStatus","alert","_getAssetUrlComponents","matches","match","onmodal","imageedit","open","modal","form","registerCmdS","imageModule","module","image","modalModule","_save","$modal","$modalForm","parts","$image","$element","nodes","src","options","name","concat","$select","on","ev","currentTarget","val","optionIndex","option","selected","append","$formItem","close","Garnish","shortcutManager","removeLayer","onimage","changed","attr","newTransform","fadeTo","prop","stop","RegExp","add"],"mappings":"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","file":"CraftAssetImages.min.js","sourcesContent":["var plugin = $.extend({}, Craft.Redactor.PluginBase, {\n    title: 'image',\n    apiTarget: 'plugin.craftAssetImages.showModal',\n    icon: '<i class=\"re-icon-image\"></i>',\n    transforms: [],\n    volumes: null,\n    allowAllUploaders: false,\n    defaultTransform: '',\n    modalState: {\n        selectedTransform: null\n    },\n\n    showModal: function () {\n        if (this.app.selection.isCollapsed()) {\n            this.app.selection.save();\n            this.app.selectionMarkers = false;\n        } else {\n            this.app.selection.saveMarkers();\n            this.app.selectionMarkers = true;\n        }\n\n        if (typeof this.assetSelectionModal === 'undefined') {\n            const criteria = {\n                siteId: this.elementSiteId,\n                kind: 'image'\n            };\n\n            if (this.allowAllUploaders) {\n                criteria.uploaderId = null;\n            }\n\n            this.assetSelectionModal = Craft.createElementSelectorModal('craft\\\\elements\\\\Asset', {\n                storageKey: 'RedactorInput.ChooseImage',\n                multiSelect: true,\n                sources: this.volumes,\n                criteria: criteria,\n                onSelect: function(assets, transform) {\n                    if (assets.length) {\n                        if (this.app.selectionMarkers) {\n                            this.app.selection.restoreMarkers();\n                        } else {\n                            this.app.selection.restore();\n                        }\n\n                        this.app.selectionMarkers = false;\n\n                        const data = {};\n                        const isMulti = assets.length > 1;\n\n                        const processAssetUrls = function (assets, callback) {\n                            const asset = assets.pop();\n                            const isTransform = this._isTransformUrl(asset.url);\n\n                            // If transform was selected or we don't have a default, no _real_ processing.\n                            if (isTransform || this.defaultTransform.length == 0) {\n                                data['asset'+asset.id] = {\n                                    url: this._buildAssetUrl(asset.id, asset.url, isTransform ? transform : this.defaultTransform),\n                                    id: asset.id,\n                                };\n\n                                if (assets.length) {\n                                    processAssetUrls(assets, callback);\n                                } else {\n                                    callback();\n                                }\n                            // Otherwise, get the transform url for the default transform.\n                            } else {\n                                let url = this._getTransformUrl(asset.id, this.defaultTransform, function (url) {\n                                    data['asset' + asset.id] = {\n                                        url: this._buildAssetUrl(asset.id, url, this.defaultTransform),\n                                        id: asset.id\n                                    }\n\n                                    if (assets.length) {\n                                        processAssetUrls(assets, callback);\n                                    } else {\n                                        callback();\n                                    }\n                                }.bind(this))\n                            }\n                        }.bind(this);\n\n                        processAssetUrls(assets, function () {\n                            this.app.api('module.image.insert', data);\n\n                            // If single asset selected, show the image modal.\n                            if (!isMulti) {\n                                this.modalState.selectedTransform = this.defaultTransform;\n                                this.app.api('module.image.open');\n                            }\n                        }.bind(this));\n                    }\n                }.bind(this),\n                transforms: this.transforms,\n                closeOtherModals: false\n            });\n        } else {\n            this.assetSelectionModal.show();\n        }\n    },\n\n    setTransforms: function (transforms) {\n        this.transforms = transforms;\n    },\n\n    setDefaultTransform: function (transform) {\n        this.defaultTransform = transform;\n    },\n\n    setVolumes: function (volumes) {\n        this.volumes = volumes;\n    },\n\n    _buildAssetUrl: (assetId, assetUrl, transform) => assetUrl + '#asset:' + assetId + ':' + (transform ? 'transform:' + transform : 'url'),\n\n    _removeTransformFromUrl: (url) => url.replace(/(.*)(_[a-z0-9+].*\\/)(.*)/, '$1$3'),\n\n    _isTransformUrl: (url) => /(.*)(_[a-z0-9+].*\\/)(.*)/.test(url),\n\n    _getTransformUrl: function (assetId, handle, callback) {\n        var data = {\n            assetId: assetId,\n            handle: handle\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, function(response, textStatus) {\n            if (textStatus === 'success') {\n                if (response.url) {\n                    callback(response.url);\n                } else {\n                    alert('There was an error generating the transform URL.');\n                }\n            }\n        });\n    },\n\n    _getAssetUrlComponents: (url) => {\n        const matches = url.match(/(.*)#asset:(\\d+):(url|transform):?([a-zA-Z][a-zA-Z0-9_]*)?/);\n        return matches ? {url: matches[1], assetId: matches[2], transform: matches[3] !== 'url' ? matches[4] : null} : null;\n    },\n\n    onmodal: {\n        imageedit: {\n            open: function(modal, form) {\n                this.registerCmdS(\n                    () => {\n                        // Seems to be the simplest way.\n                        const imageModule = this.app.module.image;\n                        const modalModule = this.app.module.modal;\n                        imageModule._save(modalModule.$modal, modalModule.$modalForm);\n                    },\n                    () => {\n                        this.app.api('module.modal.close');\n                    }\n                );\n\n                const parts = this._getAssetUrlComponents(this.app.module.image.$image.$element.nodes[0].src);\n\n                if (!parts) {\n                    return;\n                }\n\n                let {transform} = parts;\n\n                if (!transform || !transform.length) {\n                    transform = this.defaultTransform;\n                } else {\n                    this.modalState.selectedTransform = transform;\n                }\n\n                const options = [{handle: '', name: \"No transform\"}].concat(this.transforms);\n\n                const $select = $('<select id=\"modal-image-transform\"></select>').on('change', function(ev) {\n                    this.modalState.selectedTransform = $(ev.currentTarget).val();\n                }.bind(this));\n\n                for (optionIndex in options) {\n                    let option = options[optionIndex];\n                    let selected = transform && option.handle == transform;\n                    $select.append('<option value=\"' + option.handle + '\"' + (selected ? ' selected=\"selected\"' : '') + '>' + option.name + '</option>');\n                }\n\n                const $formItem = $('<div class=\"form-item form-item-transform\"><label for=\"modal-image-transform\">Transform</label></div>').append($select);\n\n                $(form.nodes[0]).append($formItem);\n            },\n\n            close: function () {\n                Garnish.shortcutManager.removeLayer();\n            }\n        }\n    },\n\n    onimage :{\n        changed: function(image)\n        {\n            const $image = $(image.$element.nodes[0]);\n            const parts = this._getAssetUrlComponents($image.attr('src'));\n            const newTransform = this.modalState.selectedTransform;\n\n            if (!parts) {\n                return;\n            }\n\n            const {transform, assetId, url} = parts;\n\n            if (transform == newTransform) {\n                return;\n            }\n\n            $image.fadeTo(100, 0.2);\n\n            if (newTransform.length) {\n                this._getTransformUrl(assetId, newTransform, function (url) {\n                    $image.prop('src', this._buildAssetUrl(assetId, url, newTransform));\n                    $image.stop().fadeTo(0, 1);\n                }.bind(this));\n            } else {\n                const pattern = new RegExp('(.*)(_' + transform + '.*\\/)(.*)');\n                $image.prop('src', this._buildAssetUrl(assetId, this._removeTransformFromUrl(url), newTransform));\n                $image.stop().fadeTo(0, 1);\n            }\n        }\n    }\n});\n\n(function($R) {\n    $R.add('plugin', 'craftAssetImages', plugin);\n})(Redactor);\n"]}