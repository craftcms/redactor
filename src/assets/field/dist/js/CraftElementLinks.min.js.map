{"version":3,"sources":["CraftElementLinks.js"],"names":["plugin","$","extend","Craft","Redactor","PluginBase","linkOptions","existingText","hack","allSites","modalState","selectedLink","text","url","start","showModal","arguments","zIndex","refHandle","callback","this","saveSelection","app","createElementSelectorModal","elementType","storageKey","sources","criteria","defaultSiteId","elementSiteId","autoFocusSearchBox","onSelect","proxy","elements","length","restoreSelection","element","selectedText","selection","getText","id","siteId","label","api","closeOtherModals","setLinkOptions","onmodal","link","open","modal","form","editor","focus","$form","nodes","find","val","elementUrl","match","siteOptions","selectedSite","split","parseInt","pop","$select","on","ev","existingUrl","selectedSiteId","currentTarget","urlParts","join","bind","selected","siteName","append","Object","entries","$formItem","close","button","toolbar","getButton","items","getDropdown","newList","counter","option","title","optionTitle","args","setDropdown","setAllSites","add"],"mappings":"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","file":"CraftElementLinks.min.js","sourcesContent":["var plugin = $.extend({}, Craft.Redactor.PluginBase, {\n  linkOptions: [],\n  existingText: '',\n  hack: null,\n  allSites: {},\n  modalState: {\n    selectedLink: {\n      text: null,\n      url: null,\n    },\n  },\n\n  // Do nothing on start.\n  start: function () {},\n  showModal: function (arguments, zIndex) {\n    let refHandle = arguments.refHandle,\n      callback = arguments.callback;\n\n    this.saveSelection(this.app);\n\n    // Create a new one each time because Redactor creates a new one and we can't reuse the references.\n    const modal = Craft.createElementSelectorModal(arguments.elementType, {\n      storageKey: 'RedactorInput.LinkTo.' + arguments.elementType,\n      sources: arguments.sources,\n      criteria: arguments.criteria,\n      defaultSiteId: this.elementSiteId,\n      autoFocusSearchBox: false,\n      onSelect: $.proxy(function (elements) {\n        if (elements.length) {\n          this.restoreSelection(this.app);\n          const element = elements[0];\n          const selectedText = this.app.selection.getText();\n          this.modalState.selectedLink = {\n            url:\n              element.url +\n              '#' +\n              refHandle +\n              ':' +\n              element.id +\n              '@' +\n              element.siteId,\n            text: selectedText.length > 0 ? selectedText : element.label,\n          };\n\n          this.app.api('module.link.open');\n        }\n      }, this),\n      closeOtherModals: false,\n    });\n  },\n\n  setLinkOptions: function (linkOptions) {\n    this.linkOptions = linkOptions;\n  },\n\n  onmodal: {\n    link: {\n      open: function (modal, form) {\n        // Prevent Redactor from aggressively refocusing, when we don't want it to.\n        this.hack = modal.app.editor.focus;\n        modal.app.editor.focus = () => null;\n\n        $form = $(form.nodes);\n\n        if (this.modalState.selectedLink.url) {\n          $form.find('input[name=url]').val(this.modalState.selectedLink.url);\n        }\n\n        if (this.modalState.selectedLink.text) {\n          $form.find('input[name=text]').val(this.modalState.selectedLink.text);\n        }\n\n        this.modalState.selectedLink = {\n          text: null,\n          url: null,\n        };\n\n        let elementUrl = $form.find('input[name=url]').val();\n\n        // Only add site selector if it looks like an element reference link\n        if (elementUrl.match(/#(category|entry|product):\\d+/)) {\n          let siteOptions = this.allSites;\n          let selectedSite = 0;\n\n          if (elementUrl.split('@').length > 1) {\n            selectedSite = parseInt(elementUrl.split('@').pop(), 10);\n          }\n\n          const $select = $('<select id=\"modal-site-selector\"></select>').on(\n            'change',\n            function (ev) {\n              let existingUrl = $form.find('input[name=url]').val();\n              const selectedSiteId = parseInt($(ev.currentTarget).val(), 10);\n\n              if (existingUrl.match(/.*(@\\d+)$/)) {\n                let urlParts = existingUrl.split('@');\n                urlParts.pop();\n                existingUrl = urlParts.join('@');\n              }\n\n              if (selectedSiteId) {\n                existingUrl += '@' + selectedSiteId;\n              }\n\n              $form.find('input[name=url]').val(existingUrl);\n            }.bind(this)\n          );\n\n          let selected = selectedSite === 0 ? ' selected=\"selected\"' : '';\n          $select.append(`<option value=\"0\"${selected}>Multisite</option>`);\n\n          for ([siteId, siteName] of Object.entries(siteOptions)) {\n            let selected =\n              selectedSite === parseInt(siteId, 10)\n                ? ' selected=\"selected\"'\n                : '';\n            $select.append(\n              `<option value=\"${siteId}\"${selected}>${siteName}</option>`\n            );\n          }\n\n          const $formItem = $(\n            '<div class=\"form-item form-item-site\"><label for=\"modal-site-selector\">Site</label></div>'\n          ).append($select);\n\n          $(form.nodes[0]).append($formItem);\n        }\n      },\n      close: function (modal) {\n        // Revert the functionality.\n        modal.app.editor.focus = this.hack;\n        this.hack = null;\n      },\n    },\n  },\n\n  setLinkOptions: function (linkOptions) {\n    var button = this.app.toolbar.getButton('link'),\n      dropdown = button.getDropdown(),\n      items = dropdown.items,\n      newList = {},\n      counter = 0;\n\n    for (var option in linkOptions) {\n      option = linkOptions[option];\n      newList['custom' + ++counter] = {\n        title: option.optionTitle,\n        api: 'plugin.craftElementLinks.showModal',\n        args: {\n          elementType: option.elementType,\n          refHandle: option.refHandle,\n          sources: option.sources,\n          criteria: option.criteria,\n        },\n      };\n    }\n\n    button.setDropdown($.extend(newList, items));\n  },\n\n  setAllSites: function (allSites) {\n    this.allSites = allSites;\n  },\n});\n\n(function ($R) {\n  $R.add('plugin', 'craftElementLinks', plugin);\n})(Redactor);\n"]}