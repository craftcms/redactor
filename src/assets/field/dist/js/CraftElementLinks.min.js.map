{"version":3,"sources":["CraftElementLinks.js"],"names":["plugin","$","extend","Craft","Redactor","PluginBase","linkOptions","existingText","hack","allSites","modalState","selectedLink","text","url","start","showModal","arguments","zIndex","refHandle","callback","selectedText","this","app","selection","getText","save","createElementSelectorModal","elementType","storageKey","sources","criteria","defaultSiteId","elementSiteId","autoFocusSearchBox","onSelect","proxy","elements","length","element","restore","id","siteId","label","api","closeOtherModals","setLinkOptions","onmodal","link","open","modal","form","editor","focus","$form","nodes","find","val","elementUrl","match","siteOptions","selectedSite","split","parseInt","pop","$select","on","ev","existingUrl","selectedSiteId","currentTarget","urlParts","join","bind","selected","siteName","append","Object","entries","$formItem","close","button","toolbar","getButton","items","getDropdown","newList","counter","option","title","optionTitle","args","setDropdown","setAllSites","add"],"mappings":"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","file":"CraftElementLinks.min.js","sourcesContent":["var plugin = $.extend({}, Craft.Redactor.PluginBase, {\n    linkOptions: [],\n    existingText: '',\n    hack: null,\n    allSites: {},\n    modalState: {\n        selectedLink: {\n            text: null,\n            url: null\n        }\n    },\n\n    // Do nothing on start.\n    start: function () {\n\n    },\n    showModal: function (arguments, zIndex) {\n        let refHandle = arguments.refHandle,\n            callback = arguments.callback;\n\n        const selectedText = this.app.selection.getText();\n        this.app.selection.save();\n\n        // Create a new one each time because Redactor creates a new one and we can't reuse the references.\n        const modal = Craft.createElementSelectorModal(arguments.elementType, {\n            storageKey: 'RedactorInput.LinkTo.' + arguments.elementType,\n            sources: arguments.sources,\n            criteria: arguments.criteria,\n            defaultSiteId: this.elementSiteId,\n            autoFocusSearchBox: false,\n            onSelect: $.proxy(function(elements) {\n                if (elements.length) {\n                    const element = elements[0];\n\n                    this.app.selection.restore();\n\n                    this.modalState.selectedLink = {\n                        url: element.url + '#' + refHandle + ':' + element.id + '@' + element.siteId,\n                        text: selectedText.length > 0 ? selectedText : element.label\n                    }\n\n                    this.app.api('module.link.open');\n                }\n            }, this),\n            closeOtherModals: false,\n        });\n    },\n\n    setLinkOptions: function (linkOptions) {\n        this.linkOptions = linkOptions;\n    },\n\n    onmodal: {\n        link: {\n            open: function(modal, form) {\n                // Prevent Redactor from aggressively refocusing, when we don't want it to.\n                this.hack = modal.app.editor.focus;\n                modal.app.editor.focus = () => null;\n\n                $form = $(form.nodes);\n\n                if (this.modalState.selectedLink.url) {\n                    $form.find('input[name=url]').val(this.modalState.selectedLink.url);\n                }\n\n                if (this.modalState.selectedLink.text) {\n                    $form.find('input[name=text]').val(this.modalState.selectedLink.text);\n                }\n\n                this.modalState.selectedLink = {\n                    text: null,\n                    url: null\n                };\n\n                let elementUrl = $form.find('input[name=url]').val();\n\n                // Only add site selector if it looks like an element reference link\n                if (elementUrl.match(/#(category|entry|product):\\d+/)) {\n                    let siteOptions = this.allSites;\n                    let selectedSite = 0;\n\n                    if (elementUrl.split('@').length > 1) {\n                        selectedSite = parseInt(elementUrl.split('@').pop(), 10);\n                    }\n\n                    const $select = $('<select id=\"modal-site-selector\"></select>').on('change', function(ev) {\n                        let existingUrl = $form.find('input[name=url]').val();\n                        const selectedSiteId = parseInt($(ev.currentTarget).val(), 10);\n\n                        if (existingUrl.match(/.*(@\\d+)$/)) {\n                            let urlParts = existingUrl.split('@');\n                            urlParts.pop();\n                            existingUrl = urlParts.join('@');\n                        }\n\n                        if (selectedSiteId) {\n                            existingUrl += '@' + selectedSiteId;\n                        }\n\n                        $form.find('input[name=url]').val(existingUrl);\n                    }.bind(this));\n\n                    let selected = selectedSite === 0 ? ' selected=\"selected\"' : '';\n                    $select.append(`<option value=\"0\"${selected}>Multisite</option>`);\n\n                    for ([siteId, siteName] of Object.entries(siteOptions)) {\n                        let selected = selectedSite === parseInt(siteId, 10) ? ' selected=\"selected\"' : '';\n                        $select.append(`<option value=\"${siteId}\"${selected}>${siteName}</option>`);\n                    }\n\n                    const $formItem = $('<div class=\"form-item form-item-site\"><label for=\"modal-site-selector\">Site</label></div>').append($select);\n\n                    $(form.nodes[0]).append($formItem);\n                }\n            },\n            close: function (modal) {\n                // Revert the functionality.\n                modal.app.editor.focus = this.hack;\n                this.hack = null;\n            }\n        }\n    },\n\n    setLinkOptions: function (linkOptions) {\n        var button = this.app.toolbar.getButton('link'),\n            dropdown = button.getDropdown(),\n            items = dropdown.items,\n            newList = {},\n            counter = 0;\n\n        for (var option in linkOptions) {\n            option = linkOptions[option];\n            newList['custom'+(++counter)] = {\n                title: option.optionTitle,\n                api: 'plugin.craftElementLinks.showModal',\n                args: {\n                    elementType: option.elementType,\n                    refHandle: option.refHandle,\n                    sources: option.sources,\n                    criteria: option.criteria\n                }\n            };\n        }\n\n        button.setDropdown($.extend(newList, items));\n    },\n\n    setAllSites: function (allSites) {\n        this.allSites = allSites;\n    },\n});\n\n(function($R) {\n    $R.add('plugin', 'craftElementLinks', plugin);\n})(Redactor);\n"]}