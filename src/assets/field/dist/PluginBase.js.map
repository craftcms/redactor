{"version":3,"file":"PluginBase.js","mappings":"AAAAA,MAAMC,SAAWD,MAAMC,UAAY,GAEnCD,MAAMC,SAASC,WAAa,CAC1BC,IAAK,KACLC,MAAO,KACPC,UAAW,KACXC,KAAM,KACNC,cAAe,KAEfC,KAAM,SAAUL,GACdM,KAAKN,IAAMA,GAGbO,MAAO,WACLD,KAAKL,MAAQK,KAAKN,IAAIQ,KAAKC,IAAIH,KAAKL,QAGtCS,eAAgB,SAAUC,GACxB,IAAIC,EAAiBN,KAAKN,IAAIa,QAAQC,UAAUH,GAEhD,GAAKC,EAAL,CAKA,IAAIT,EAAOS,EAAeG,MAAMN,IAAI,GAEhCO,EAAiBL,EAAgB,eACjCM,EAAcX,KAAKN,IAAIa,QAAQK,eACjCP,EACAK,EACA,CAACf,MAAOK,KAAKL,QAEfW,EAAeO,SAEf,IAAIC,EAAa,CACfnB,MAAOK,KAAKL,MACZoB,IAAKf,KAAKJ,WAIRoB,EAAShB,KAAKN,IAAIa,QAAQK,eAC5BF,EACAL,EACAS,GAEFH,EAAYE,SAEZG,EAAOC,QAAQpB,QA3BbG,KAAKkB,UAAUb,IA8BnBa,UAAW,SAAUC,EAAYC,GAC/B,IAQIC,EAAUC,EARVC,EAAavB,KAAKN,IAAIa,QAAQiB,iBAE9BV,EAAa,CACfnB,MAAOK,KAAKL,MACZoB,IAAKf,KAAKJ,gBAMS,IAAVwB,IACLG,EAAavB,KAAKN,IAAIa,QAAQkB,cAEnBC,OAASN,IACtBC,EAAW,SACXC,EAAMC,EAAWH,IAIRpB,KAAKN,IAAIa,QAAQW,UAC5BC,EACAL,EACAO,EACAC,GAEKL,QAAQU,EAAE,qBAAuBR,EAAa,UAAUhB,IAAI,KAGrEyB,iBAAkB,SAAUC,GAC1B7B,KAAKF,cAAgB+B,GAGvBC,aAAc,SAACC,EAAQC,GAErBC,QAAQC,gBAAgBC,WAGxBF,QAAQC,gBAAgBE,iBACtB,CAACC,QAASJ,QAAQK,MAAOC,MAAM,IAC/B,WACER,OAKJE,QAAQC,gBAAgBE,iBAAiBH,QAAQO,SAAS,WACxDR,QAIJS,cAAe,SAAC/C,GACVA,EAAIgD,UAAUC,eAChBjD,EAAIgD,UAAUE,OACdlD,EAAImD,kBAAmB,IAEvBnD,EAAIgD,UAAUI,cACdpD,EAAImD,kBAAmB,IAI3BE,iBAAkB,SAACrD,GACbA,EAAImD,iBACNnD,EAAIgD,UAAUM,iBAEdtD,EAAIgD,UAAUO,UAGhBvD,EAAImD,kBAAmB","sources":["webpack:///./js/PluginBase.js"],"sourcesContent":["Craft.Redactor = Craft.Redactor || {};\n\nCraft.Redactor.PluginBase = {\n  app: null,\n  title: null,\n  apiTarget: null,\n  icon: null,\n  elementSiteId: null,\n\n  init: function (app) {\n    this.app = app;\n  },\n\n  start: function () {\n    this.title = this.app.lang.get(this.title);\n  },\n\n  overrideButton: function (replaceButton) {\n    var previousButton = this.app.toolbar.getButton(replaceButton);\n\n    if (!previousButton) {\n      this.addButton(replaceButton);\n      return;\n    }\n\n    var icon = previousButton.$icon.get(0);\n\n    var placeholderKey = replaceButton + '_placeholder';\n    var placeholder = this.app.toolbar.addButtonAfter(\n      replaceButton,\n      placeholderKey,\n      {title: this.title}\n    );\n    previousButton.remove();\n\n    var buttonData = {\n      title: this.title,\n      api: this.apiTarget,\n    };\n\n    // Create the new button\n    var button = this.app.toolbar.addButtonAfter(\n      placeholderKey,\n      replaceButton,\n      buttonData\n    );\n    placeholder.remove();\n\n    button.setIcon(icon);\n  },\n\n  addButton: function (buttonName, index) {\n    var allButtons = this.app.toolbar.getButtonsKeys();\n\n    var buttonData = {\n      title: this.title,\n      api: this.apiTarget,\n    };\n\n    // Figure out where to put it\n    var position, $el;\n\n    if (typeof index !== 'undefined') {\n      var allButtons = this.app.toolbar.getButtons();\n\n      if (allButtons.length > index) {\n        position = 'before';\n        $el = allButtons[index];\n      }\n    }\n\n    var button = this.app.toolbar.addButton(\n      buttonName,\n      buttonData,\n      position,\n      $el\n    );\n    button.setIcon($('<i class=\"re-icon-' + buttonName + '\"></i>').get(0));\n  },\n\n  setElementSiteId: function (siteId) {\n    this.elementSiteId = siteId;\n  },\n\n  registerCmdS: (saveCb, closeCb) => {\n    // Add a new layer\n    Garnish.shortcutManager.addLayer();\n\n    // Trigger the save callback on Cmd+S\n    Garnish.shortcutManager.registerShortcut(\n      {keyCode: Garnish.S_KEY, ctrl: true},\n      () => {\n        saveCb();\n      }\n    );\n\n    // Trigger the close callback on Esc\n    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n      closeCb();\n    });\n  },\n\n  saveSelection: (app) => {\n    if (app.selection.isCollapsed()) {\n      app.selection.save();\n      app.selectionMarkers = false;\n    } else {\n      app.selection.saveMarkers();\n      app.selectionMarkers = true;\n    }\n  },\n\n  restoreSelection: (app) => {\n    if (app.selectionMarkers) {\n      app.selection.restoreMarkers();\n    } else {\n      app.selection.restore();\n    }\n\n    app.selectionMarkers = false;\n  },\n};\n"],"names":["Craft","Redactor","PluginBase","app","title","apiTarget","icon","elementSiteId","init","this","start","lang","get","overrideButton","replaceButton","previousButton","toolbar","getButton","$icon","placeholderKey","placeholder","addButtonAfter","remove","buttonData","api","button","setIcon","addButton","buttonName","index","position","$el","allButtons","getButtonsKeys","getButtons","length","$","setElementSiteId","siteId","registerCmdS","saveCb","closeCb","Garnish","shortcutManager","addLayer","registerShortcut","keyCode","S_KEY","ctrl","ESC_KEY","saveSelection","selection","isCollapsed","save","selectionMarkers","saveMarkers","restoreSelection","restoreMarkers","restore"],"sourceRoot":""}